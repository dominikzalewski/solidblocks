#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

export VERSION="${GITHUB_REF_NAME:-snapshot}"

source "${DIR}/../solidblocks-shell/lib/log.sh"
source "${DIR}/../solidblocks-shell/lib/python.sh"
source "${DIR}/../lib/terraform.sh"

TESTS="plain storage-mounts"

terraform_export_credentials
export TF_VAR_hetzner_dns_api_token="${HETZNER_DNS_API_TOKEN}"

function echo_include() {
  local file=${1:-}
  echo ""
  echo "################################################################################"
  echo "# included '${file}'"
  echo "################################################################################"
  cat "${DIR}/../${file}"
  echo ""
  echo "################################################################################"
  echo ""
}

function task_build {
  (
    mkdir -p "${DIR}/build/solidblocks-cloud-init/lib"
    cp -rv ${DIR}/lib/* "${DIR}/build/solidblocks-cloud-init/lib/"

    cd "${DIR}/build/solidblocks-cloud-init"

    echo "creating distribution '${DIR}/build/solidblocks-cloud-init-${VERSION}.zip'"
    zip -r "${DIR}/build/solidblocks-cloud-init-${VERSION}.zip" *

    mkdir -p "${DIR}/build/snippets"

    local checksum="$(sha256sum "${DIR}/build/solidblocks-cloud-init-${VERSION}.zip" | cut -f 1 -d " ")"

    cat "${DIR}/templates/cloud-init-header.template" > "${DIR}/modules/solidblocks-cloud-init/cloud-init-header.sh"

    echo_include "solidblocks-shell/lib/utils-include.sh" > "${DIR}/build/solidblocks-cloud-init-bootstrap.sh"
    echo_include "solidblocks-shell/lib/log-include.sh" >> "${DIR}/build/solidblocks-cloud-init-bootstrap.sh"
    echo_include "solidblocks-shell/lib/curl-include.sh" >> "${DIR}/build/solidblocks-cloud-init-bootstrap.sh"
    echo_include "solidblocks-shell/lib/apt.sh" >> "${DIR}/build/solidblocks-cloud-init-bootstrap.sh"
    echo_include "solidblocks-shell/lib/package-include.sh" >> "${DIR}/build/solidblocks-cloud-init-bootstrap.sh"
    cat "${DIR}/templates/cloud-init-bootstrap.template" >> "${DIR}/build/solidblocks-cloud-init-bootstrap.sh"

    sed \
      -i \
      --expression="s/__SOLIDBLOCKS_VERSION__/${VERSION}/g" \
      --expression="s/__SOLIDBLOCKS_CLOUD_INIT_CHECKSUM__/${checksum}/g" "${DIR}/build/solidblocks-cloud-init-bootstrap.sh"

    cp "${DIR}/build/solidblocks-cloud-init-bootstrap.sh" "${DIR}/modules/solidblocks-cloud-init/solidblocks-cloud-init-bootstrap.sh"

  )
}

function task_lint {
  ensure_environment
  find "${DIR}/lib" -name "*.sh" -exec shellcheck {} \;
}

function task_test {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  local tests="${1:-$TESTS}"

  for test in ${tests}; do
    run_test "${test}"
  done
}

function run_test {
  local test="${1:-}"

  python_ensure_venv "${DIR}"
  terraform_wrapper "${DIR}/test/${test}" apply -auto-approve -var="solidblocks_version=${VERSION}"

  while ! ssh -F "${DIR}/test/${test}/ssh_config" "test" test -f /run/cloud-init/result.json; do
    log_echo_error "waiting for '${test}' server cloud init run"
    sleep 1
  done

  SSL_DOMAIN="${test}.blcks.de" "${DIR}/venv/bin/pytest" --ssh-config="${DIR}/test/${test}/ssh_config" --hosts=test --show-capture=all -s "${DIR}/test/test_${test}.py"

  clean_cloud_resources "${test}"
}


function task_test_ssh {
    local test=${1}
    shift || true
    ssh -F "${DIR}/test/${test}/ssh_config" "test" ${@}
}

function clean_cloud_resources() {
  local test=${1}
  shift || true
  terraform_wrapper "${DIR}/test/${test}" destroy -auto-approve -var="solidblocks_version=${VERSION}"
}

function task_clean {
  for test in ${TESTS}; do
    clean_cloud_resources "${test}"
  done

  rm -rf "${DIR}/build"
}

function task_release_docker {
  echo "<not implemented>"
}

function task_format {
  echo "<not implemented>"
}

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

arg=${1:-}
shift || true
case ${arg} in
  lint) task_lint "$@" ;;
  clean) task_clean "$@" ;;
  build) task_build "$@" ;;
  test) task_test "$@" ;;
  format) task_format "$@" ;;
  test-ssh) task_test_ssh "$@" ;;
  release-docker) task_release_docker "$@" ;;
  *) task_usage ;;
esac
