#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

source "${DIR}/../lib/utils.sh"

export VERSION="$(version)"

BUILD_TARGET=${BUILD_TARGET:-linuxX64}

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

function task_test {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  ${DIR}/gradlew ${BUILD_TARGET}Test
}

function task_test_hetzner_nuke {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  export HCLOUD_TOKEN="${HCLOUD_TOKEN:-$(pass solidblocks/hetzner/test/hcloud_api_token)}"

  (
    cd "${DIR}/test/hetzner_nuke"
    terraform init -upgrade
    terraform apply -auto-approve
  )

  "${DIR}/blcks_${BUILD_TARGET}" hetzner nuke
  echo ""
  "${DIR}/blcks_${BUILD_TARGET}" hetzner nuke --do-nuke
  echo ""
}

function task_test_workflow {
  (
    cd ${DIR}/test/no_workflow_file

    divider_header "no_workflow_file -> check"
    "${DIR}/blcks_${BUILD_TARGET}" workflow check || true
    divider_footer

    divider_header "no_workflow_file --> --help"
    "${DIR}/blcks_${BUILD_TARGET}" workflow --help
    divider_footer
  )

  (
    cd ${DIR}/test/testbed1

    divider_header "testbed1 --> workflow --help"
    "${DIR}/blcks_${BUILD_TARGET}" workflow --help
    divider_footer

    divider_header "testbed1 --> workflow example"
    "${DIR}/blcks_${BUILD_TARGET}" workflow example
    divider_footer

    divider_header "testbed1 --> workflow check"
    "${DIR}/blcks_${BUILD_TARGET}" workflow check
    divider_footer
  )

  (
     cd ${DIR}/test/testbed2

    divider_header "testbed2 --> workflow check"
    "${DIR}/blcks_${BUILD_TARGET}" workflow check || true
    divider_footer
  )
}

function task_test_integration {
  if [[ "${SKIP_TESTS:-}" == "true" ]] || [[ "${BUILD_TARGET}" == "linuxArm64" ]]; then
    exit 0
  fi

  if [[ "${CI:-}" == "true" ]] && [[ "${BUILD_TARGET}" == macos* ]]; then
     brew tap hashicorp/tap
     brew install hashicorp/tap/terraform
  fi

  if [[ "${CI:-}" == "true" ]] && [[ "${BUILD_TARGET}" == mingw* ]]; then
     choco install terraform
  fi

  task_test_hetzner_nuke
}

function divider_header() {
  echo "==================================================================================="
  echo $@
  echo "-----------------------------------------------------------------------------------"
}

function divider_footer() {
  echo "==================================================================================="
  echo ""
  echo ""
}

function task_build {
  if [[ "${CI:-}" == "true" ]] && [[ "${BUILD_TARGET}" == linux* ]]; then
    sudo apt-get install libcurl4-gnutls-dev
  fi

  ${DIR}/gradlew "${BUILD_TARGET}Binaries"
  find "${DIR}/build/bin/${BUILD_TARGET}/releaseExecutable/" -type f -exec cp {} ${DIR}/blcks_${BUILD_TARGET} \;
  chmod +x ${DIR}/blcks_${BUILD_TARGET}
}

function task_clean {
  ${DIR}/gradlew clean
}

arg=${1:-}
shift || true
case ${arg} in
  build) task_build "$@" ;;
  test) task_test "$@" ;;
  test-integration) task_test_integration "$@" ;;
  test-hetzner-nuke) task_test_hetzner_nuke "$@" ;;
  format) ;;
  clean) task_clean "$@" ;;
  *) task_usage ;;
esac