#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

source "${DIR}/../solidblocks-shell/lib/software.sh"
source "${DIR}/../lib/utils.sh"

export VERSION="$(version)"

DOCKER_REGISTRY="ghcr.io"
DOCKER_REPOSITORY="pellepelster"
DOCKER_IMAGE_NAME="solidblocks-minio"
DOCKER_OPTIONS="${DOCKER_OPTIONS:-}"

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

function task_test {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  software_ensure_terraform
  software_set_export_path
  (
    cd "${DIR}/test/terraform"
    terraform init
    terraform apply --auto-approve
  )
  (
    cd "${DIR}"
    ./gradlew check
    terraform fmt -recursive
  )
}

function task_build {
  (
    cd "${DIR}"

    echo "building '${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${VERSION}'"
    docker buildx build \
      --platform linux/amd64 \
      --push \
      --tag "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${VERSION}-rc" \
      .
  )
}

function task_release_docker {
  docker buildx imagetools create --tag "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${VERSION}" "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${VERSION}-rc"
}

function task_release_prepare {
  local version="${1:-}"

  if [[ -z "${version}" ]]; then
    echo "no version set"
    exit 1
  fi
  echo "setting version: ${version}"
}

function task_clean {
  rm -rf "${DIR}/build"
  rm -rf ${DIR}/test/terraform/.terraform
  rm -rf ${DIR}/test/terraform/*.tfstate
  rm -rf ${DIR}/test/terraform/*.tfstate.backup
  rm -rf ${DIR}/test/terraform/*.lock.hcl
}

function task_format {
  echo "<not implemented>"
}

arg=${1:-}
shift || true
case ${arg} in
  build) task_build "$@" ;;
  test) task_test "$@" ;;
  format) task_format "$@" ;;
  clean) task_clean "$@" ;;
  release-artifacts) task_release_docker "$@" ;;
  release-prepare) task_release_prepare "$@" ;;
  release-test);;
  *) task_usage ;;
esac