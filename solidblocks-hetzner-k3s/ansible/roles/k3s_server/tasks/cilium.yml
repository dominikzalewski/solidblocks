---
- name: prepare Cilium CLI on first master and deploy CNI
  when: inventory_hostname == groups['servers'][0]
  run_once: true
  block:
    - name: create tmp directory
      ansible.builtin.file:
        path: /tmp/k3s
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: check if cilium CLI is installed
      ansible.builtin.command: cilium version
      register: cilium_cli_installed
      failed_when: false
      changed_when: false
      ignore_errors: true

    - name: check for cilium CLI version in command output
      ansible.builtin.set_fact:
        installed_cli_version: >-
          {{
            cilium_cli_installed.stdout_lines
            | join(' ')
            | regex_findall('cilium-cli: (v\d+\.\d+\.\d+)')
            | first
            | default('unknown')
          }}
      when: cilium_cli_installed.rc == 0

    - name: get latest stable Cilium CLI version file
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt
        dest: /tmp/k3s/cilium-cli-stable.txt
        owner: root
        group: root
        mode: "0755"

    - name: read cilium CLI stable version from file
      ansible.builtin.command: cat /tmp/k3s/cilium-cli-stable.txt
      register: cli_ver
      changed_when: false

    - name: log installed cilium CLI version
      ansible.builtin.debug:
        msg: "installed cilium CLI version: {{ installed_cli_version | default('Not installed') }}"

    - name: log latest stable Cilium CLI version
      ansible.builtin.debug:
        msg: "latest cilium CLI version: {{ cli_ver.stdout }}"

    - name: determine if cilium CLI needs installation or update
      ansible.builtin.set_fact:
        cilium_cli_needs_update: >-
          {{
            cilium_cli_installed.rc != 0 or
            (cilium_cli_installed.rc == 0 and
            installed_cli_version != cli_ver.stdout)
          }}

    - name: install or update Cilium CLI
      when: cilium_cli_needs_update
      block:
        - name: set architecture variable
          ansible.builtin.set_fact:
            cli_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

        - name: download cilium CLI and checksum
          ansible.builtin.get_url:
            url: "{{ cilium_base_url }}/cilium-linux-{{ cli_arch }}{{ item }}"
            dest: /tmp/k3s/cilium-linux-{{ cli_arch }}{{ item }}
            owner: root
            group: root
            mode: "0755"
          loop:
            - .tar.gz
            - .tar.gz.sha256sum
          vars:
            cilium_base_url: https://github.com/cilium/cilium-cli/releases/download/{{ cli_ver.stdout }}

        - name: verify the downloaded tarball
          ansible.builtin.shell: |
            cd /tmp/k3s && sha256sum --check cilium-linux-{{ cli_arch }}.tar.gz.sha256sum
          args:
            executable: /bin/bash
          changed_when: false

        - name: extract Cilium CLI to /usr/local/bin
          ansible.builtin.unarchive:
            src: /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz
            dest: /usr/local/bin
            remote_src: true

        - name: Remove downloaded tarball and checksum file
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz
            - /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz.sha256sum

    - name: test for existing cilium install
      ansible.builtin.command: |
        k3s kubectl -n kube-system get daemonsets cilium
      register: cilium_installed
      failed_when: false
      changed_when: false
      ignore_errors: true

    - name: check existing Cilium install
      when: cilium_installed.rc == 0
      block:
        - name: check Cilium version
          ansible.builtin.command: cilium version
          register: cilium_version_output
          failed_when: false
          changed_when: false
          ignore_errors: true

        - name: Parse installed Cilium version
          ansible.builtin.set_fact:
            installed_cilium_version: >-
              {{
                cilium_version_output.stdout_lines
                | join(' ')
                | regex_findall('cilium image.+(\d+\.\d+\.\d+)')
                | first
                | default('unknown')
              }}

        - name: Determine if Cilium needs update
          ansible.builtin.set_fact:
            cilium_needs_update: >-
              {{ 'v' + installed_cilium_version != cilium_version }}

        - name: Log result
          ansible.builtin.debug:
            msg: >
              Installed Cilium version: {{ installed_cilium_version }},
              Target Cilium version: {{ cilium_version }},
              Update needed: {{ cilium_needs_update }}

    - name: Install Cilium
      ansible.builtin.command: >-
        {% if cilium_installed.rc != 0 %}
        cilium install
        {% else %}
        cilium upgrade
        {% endif %}
        --version "{{ cilium_version }}"
        --helm-set operator.replicas="2"
        --helm-set routingMode="native"
        --helm-set k8sServiceHost="127.0.0.1"
        --helm-set k8sServicePort="6443"
        --helm-set ipv4NativeRoutingCIDR="{{ private_cidr_network }}"
        --helm-set ipam.operator.clusterPoolIPv4PodCIDRList="{{ cluster_cidr_network }}"
        --helm-set autoDirectNodeRoutes="true"
        --helm-set directRoutingSkipUnreachable="true"
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      register: cilium_install_result
      changed_when: cilium_install_result.rc == 0
      when: cilium_installed.rc != 0 or cilium_needs_update

    - name: wait for Cilium resources
      ansible.builtin.command: >-
        {% if item.type == 'daemonset' %}
        k3s kubectl wait pods
        --namespace=kube-system
        --selector='k8s-app=cilium'
        --for=condition=Ready
        {% else %}
        k3s kubectl wait {{ item.type }}/{{ item.name }}
        --namespace=kube-system
        --for=condition=Available
        {% endif %}
        --timeout=30s
      register: cr_result
      changed_when: false
      until: cr_result is succeeded
      retries: 30
      delay: 7
      with_items:
        - { name: cilium-operator, type: deployment }
        - { name: cilium, type: daemonset, selector: k8s-app=cilium }
        #- { name: hubble-relay, type: deployment, check_hubble: true }
        #- { name: hubble-ui, type: deployment, check_hubble: true }
      loop_control:
        label: "{{ item.type }}/{{ item.name }}"
