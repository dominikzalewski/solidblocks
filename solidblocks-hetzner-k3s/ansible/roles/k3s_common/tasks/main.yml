---
#- name: gather facts
#  ansible.builtin.setup:
#    gather_subset:
#      - mounts
#
#- name: "check {{  storage_data_dir }} stats"
#  stat:
#    path: "{{  storage_data_dir }}"
#  register: dir_stat
#
#- ansible.builtin.debug:
#    var: dir_stat
#
#- name: "check {{  storage_data_dir }} mount"
#  ansible.builtin.assert:
#    that:
#      - dir_stat.stat.exists and dir_stat.stat.isdir and dir_stat.stat.mount
#    msg: "{{ storage_data_dir }} has to be a mounted volume"

- name: populate k3s node facts
  ansible.builtin.set_fact:
    k3s_node_private_ip: "{{ (ansible_all_ipv4_addresses | ansible.utils.ipaddr(private_cidr_network))[0] }}"

- name: populate service facts
  ansible.builtin.service_facts:

- name: enforce minimum ansible version
  ansible.builtin.assert:
    that:
      - ansible_version.full is version('2.14', '>=')
    msg: "minimum ansible-core version required is 2.14"

- name: install required packages
  ansible.builtin.apt:
    name: policycoreutils  # Used by install script to restore SELinux context
    update_cache: true

- name: enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true

- name: enable IPv6 forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: true
  when: ansible_all_ipv6_addresses

- name: add UFW exceptions
  when:
    - ansible_facts.services['ufw'] is defined
    - ansible_facts.services['ufw'].state == 'running'
  block:
    - name: get ufw status
      ansible.builtin.command:
        cmd: ufw status
      changed_when: false
      register: ufw_status

    - name: if ufw enabled, open api port
      when:
        - ufw_status['stdout'] == "Status':' active"
      community.general.ufw:
        rule: allow
        port: "{{ api_port }}"
        proto: tcp

    - name: if ufw enabled, open etcd ports
      when:
        - ufw_status['stdout'] == "Status':' active"
        - groups[server_group] | length > 1
      community.general.ufw:
        rule: allow
        port: "2379:2381"
        proto: tcp

    - name: If ufw enabled, allow default CIDRs
      when:
        - ufw_status['stdout'] == "Status':' active"
      community.general.ufw:
        rule: allow
        src: '{{ item }}'
      loop: "{{ (cluster_cidr + ',' + service_cidr) | split(',') }}"


