#!/usr/bin/env bash

set -eu

DIR="$(cd "$(dirname "$0")" ; pwd -P)"

source "${DIR}/lib/log.sh"
source "${DIR}/../lib/utils.sh"

export VERSION="$(version)"

TESTCONTAINER_IMAGES="debian-10 debian-11 debian-12 ubuntu-20.04 ubuntu-22.04 ubuntu-24.04"

DOCKER_REGISTRY="ghcr.io"
DOCKER_REPOSITORY="pellepelster"
DOCKER_OPTIONS="${DOCKER_OPTIONS:-}"

function task_build {
  (
    docker run  -v ${DIR}:/src hairyhenderson/gomplate:stable -d "vendors=https://raw.githubusercontent.com/watson/ci-info/master/vendors.json?type=application/array+json" -f /src/lib-templates/ci.sh.template > "${DIR}/lib/ci.sh"

    mkdir -p "${DIR}/build/solidblocks-shell"
    cp -rv ${DIR}/lib/* "${DIR}/build/solidblocks-shell/"
    cd "${DIR}/build"
    echo "creating distribution '${DIR}/build/solidblocks-shell-${VERSION}.zip'"
    zip -r "${DIR}/build/solidblocks-shell-${VERSION}.zip" solidblocks-shell/*.sh

    mkdir -p "${DIR}/build/snippets"

    local checksum="$(sha256sum "${DIR}/build/solidblocks-shell-${VERSION}.zip" | cut -f 1 -d " ")"
    sed \
      --expression="s/__SOLIDBLOCKS_VERSION__/${VERSION}/g" \
      --expression="s/__SOLIDBLOCKS_SHELL_CHECKSUM__/${checksum}/g" < "${DIR}/templates/snippets/shell-bootstrap-solidblocks.sh.template" > "${DIR}/build/snippets/shell-bootstrap-solidblocks.sh"

    sed "/__BOOTSTRAP_SOLIDBLOCKS_SHELL__/e cat ${DIR}/build/snippets/shell-bootstrap-solidblocks.sh" "${DIR}/templates/snippets/shell-minimal-skeleton-do.template" | grep -v "__BOOTSTRAP_SOLIDBLOCKS_SHELL__" > "${DIR}/build/snippets/shell-minimal-skeleton-do"
    chmod +x "${DIR}/build/snippets/shell-minimal-skeleton-do"

    sed "/__BOOTSTRAP_SOLIDBLOCKS_SHELL__/e cat ${DIR}/build/snippets/shell-bootstrap-solidblocks.sh" "${DIR}/templates/snippets/shell-kitchen-sink.sh.template" | grep -v "__BOOTSTRAP_SOLIDBLOCKS_SHELL__" > "${DIR}/build/snippets/shell-kitchen-sink.sh"
    chmod +x "${DIR}/build/snippets/shell-kitchen-sink.sh"
  )
}

function task_lint {
  ensure_environment
  find "${DIR}/lib" -name "*.sh" -exec shellcheck {} \;
}

function task_test_unit {
  local test_include="${1:-test_*.sh}"

  for test in ${DIR}/test/unit/${test_include}; do
      log_divider_header ${test}
      VERSION=${VERSION} ${test}
      log_divider_footer
  done
}

function task_test_integration {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  for test in ${DIR}/test/integration/test_*.sh; do
      log_divider_header ${test}
      VERSION=${VERSION} ${test}
      log_divider_footer
  done
}

function task_test_unit_docker {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  local images="${1:-$TESTCONTAINER_IMAGES}"
  local test_include="${2:-test_*.sh}"

  for image in ${images}
  do
      log_divider_header "running tests on '${image}'"
      docker run --network host -v /var/run/docker.sock:/var/run/docker.sock -v "${DIR}/../":/test "${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}/solidblocks-test-${image}" /test/solidblocks-shell/do test-unit "${test_include}"
      log_divider_footer
  done

}

function task_test {
  if [[ "${SKIP_TESTS:-}" == "true" ]]; then
    exit 0
  fi

  (
    cd "${DIR}"
    gradlew :solidblocks-shell:test
  )
}

function task_release_prepare {
  local version="${1:-}"

  if [[ -z "${version}" ]]; then
    echo "no version set"
    exit 1
  fi
  echo "setting version: ${version}"
}

function task_format {
  terraform fmt -recursive
}

function task_demo {
  echo "\${FORMAT_DIM}Dim\${FORMAT_RESET}:             ${FORMAT_DIM}Dim${FORMAT_RESET}"
  echo "\${FORMAT_UNDERLINE}Underline\${FORMAT_RESET}: ${FORMAT_UNDERLINE}Underline${FORMAT_RESET}"
  echo "\${FORMAT_BOLD}Bold\${FORMAT_RESET}:           ${FORMAT_BOLD}Bold${FORMAT_RESET}"
  echo "\${COLOR_RED}Red\${COLOR_RESET}:               ${COLOR_RED}Red${COLOR_RESET}"
  echo "\${COLOR_GREEN}Green\${COLOR_RESET}:           ${COLOR_GREEN}Green${COLOR_RESET}"
  echo "\${COLOR_YELLOW}Yellow\${COLOR_RESET}:         ${COLOR_YELLOW}Yellow${COLOR_RESET}"
  echo "\${COLOR_BLACK}Black\${COLOR_RESET}:           ${COLOR_BLACK}Black${COLOR_RESET}"
  echo "\${COLOR_BLUE}Blue\${COLOR_RESET}:             ${COLOR_BLUE}Blue${COLOR_RESET}"
  echo "\${COLOR_MAGENTA}Magenta\${COLOR_RESET}:       ${COLOR_MAGENTA}Magenta${COLOR_RESET}"
  echo "\${COLOR_CYAN}Cyan\${COLOR_RESET}:             ${COLOR_CYAN}Cyan${COLOR_RESET}"
  echo "\${COLOR_WHITE}White\${COLOR_RESET}:           ${COLOR_WHITE}White${COLOR_RESET}"
}

function task_clean {
  rm -rf "${DIR}/build"
}

function task_usage {
  echo "Usage: $0 ..."
  exit 1
}

arg=${1:-}
shift || true
case ${arg} in
  lint) task_lint "$@" ;;
  clean) task_clean "$@" ;;
  build) task_build "$@" ;;
  format) task_format "$@" ;;
  demo) task_demo"$@" ;;
  test) task_test "$@" ;;
  test-unit) task_test_unit "$@" ;;
  test-unit-docker) task_test_unit_docker "$@" ;;
  test-integration) task_test_integration "$@" ;;
  release-docker) ;;
  release-prepare) task_release_prepare "$@" ;;
  release-test);;
  *) task_usage ;;
esac